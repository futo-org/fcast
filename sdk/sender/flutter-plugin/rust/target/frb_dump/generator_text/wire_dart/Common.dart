// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart' if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';


                /// Main entrypoint of the Rust API
                class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
                  @internal
                  static final instance = RustLib._();

                  RustLib._();

                  /// Initialize flutter_rust_bridge
                  static Future<void> init({
                    RustLibApi? api,
                    BaseHandler? handler,
                    ExternalLibrary? externalLibrary,
                    bool forceSameCodegenVersion = true,
                  }) async {
                    await instance.initImpl(
                      api: api,
                      handler: handler,
                      externalLibrary: externalLibrary,
                      forceSameCodegenVersion: forceSameCodegenVersion,
                    );
                  }

                  /// Initialize flutter_rust_bridge in mock mode.
                  /// No libraries for FFI are loaded.
                  static void initMock({
                    required RustLibApi api,
                  }) {
                    instance.initMockImpl(
                      api: api,
                    );
                  }

                  /// Dispose flutter_rust_bridge
                  ///
                  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
                  /// is automatically disposed when the app stops.
                  static void dispose() => instance.disposeImpl();

                  @override
                  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor => RustLibApiImpl.new;

                  @override
                  WireConstructor<RustLibWire> get wireConstructor => RustLibWire.fromExternalLibrary;

                  @override
                  Future<void> executeRustInitializers() async {
                    
                  }

                  @override
                  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig => kDefaultExternalLibraryLoaderConfig;

                  @override
                  String get codegenVersion => '2.11.1';

                  @override
                  int get rustContentHash => -1116567001;

                  static const kDefaultExternalLibraryLoaderConfig = ExternalLibraryLoaderConfig(
                    stem: 'fcast_sender_sdk_flutter_binding',
                    ioDirectory: 'rust/target/release/',
                    webPrefix: 'pkg/',
                  );
                }
                

                abstract class RustLibApi extends BaseApi {
                  CastingDevice crateApiCastContextCreateDeviceFromInfo({required CastContext that , required DeviceInfo info });

CastContext crateApiCastContextNew();

Future<DeviceInfo?> crateApiDeviceInfoFromUrl({required String url });

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_CastContext;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_CastContext;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_CastContextPtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_CastingDevice;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_CastingDevice;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_CastingDevicePtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_DeviceConnectionState;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_DeviceConnectionState;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DeviceConnectionStatePtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_GenericKeyEvent;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_GenericKeyEvent;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_GenericKeyEventPtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_GenericMediaEvent;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_GenericMediaEvent;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_GenericMediaEventPtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PlaybackState;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PlaybackState;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PlaybackStatePtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Source;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Source;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SourcePtr;


                }
                

                class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
                  RustLibApiImpl({
                    required super.handler,
                    required super.wire,
                    required super.generalizedFrbRustBinding,
                    required super.portManager,
                  });

                  @override CastingDevice crateApiCastContextCreateDeviceFromInfo({required CastContext that , required DeviceInfo info })  { return handler.executeSync(SyncTask(
            callFfi: () {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastContext(that, serializer);
sse_encode_box_autoadd_device_info(info, serializer);
            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastingDevice,
          decodeErrorData: null,
        )
        ,
            constMeta: kCrateApiCastContextCreateDeviceFromInfoConstMeta,
            argValues: [that, info],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiCastContextCreateDeviceFromInfoConstMeta => const TaskConstMeta(
            debugName: "CastContext_create_device_from_info",
            argNames: ["that", "info"],
        );
        

@override CastContext crateApiCastContextNew()  { return handler.executeSync(SyncTask(
            callFfi: () {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);
            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastContext,
          decodeErrorData: sse_decode_error_message,
        )
        ,
            constMeta: kCrateApiCastContextNewConstMeta,
            argValues: [],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiCastContextNewConstMeta => const TaskConstMeta(
            debugName: "CastContext_new",
            argNames: [],
        );
        

@override Future<DeviceInfo?> crateApiDeviceInfoFromUrl({required String url })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_String(url, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_device_info,
          decodeErrorData: null,
        )
        ,
            constMeta: kCrateApiDeviceInfoFromUrlConstMeta,
            argValues: [url],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiDeviceInfoFromUrlConstMeta => const TaskConstMeta(
            debugName: "device_info_from_url",
            argNames: ["url"],
        );
        

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_CastContext => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastContext;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_CastContext => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastContext;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_CastingDevice => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastingDevice;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_CastingDevice => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastingDevice;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_DeviceConnectionState => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_DeviceConnectionState;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_DeviceConnectionState => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_DeviceConnectionState;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_GenericKeyEvent => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_GenericKeyEvent;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_GenericKeyEvent => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_GenericKeyEvent;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_GenericMediaEvent => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_GenericMediaEvent;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_GenericMediaEvent => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_GenericMediaEvent;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PlaybackState => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PlaybackState;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PlaybackState => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PlaybackState;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Source => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Source;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Source => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Source;



                  @protected CastContext dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastContext(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return CastContextImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected CastingDevice dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastingDevice(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return CastingDeviceImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected DeviceConnectionState dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_DeviceConnectionState(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return DeviceConnectionStateImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected GenericKeyEvent dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_GenericKeyEvent(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return GenericKeyEventImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected GenericMediaEvent dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_GenericMediaEvent(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return GenericMediaEventImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected PlaybackState dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PlaybackState(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return PlaybackStateImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected Source dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Source(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return SourceImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected CastContext dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastContext(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return CastContextImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected CastContext dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastContext(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return CastContextImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected CastingDevice dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastingDevice(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return CastingDeviceImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected DeviceConnectionState dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_DeviceConnectionState(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return DeviceConnectionStateImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected GenericKeyEvent dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_GenericKeyEvent(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return GenericKeyEventImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected GenericMediaEvent dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_GenericMediaEvent(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return GenericMediaEventImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected PlaybackState dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PlaybackState(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return PlaybackStateImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected Source dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Source(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return SourceImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected String dco_decode_String(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as String; }

@protected DeviceEventHandler dco_decode_TraitDef_DeviceEventHandler(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
throw UnimplementedError(); }

@protected DeviceInfo dco_decode_box_autoadd_device_info(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return dco_decode_device_info(raw); }

@protected DeviceInfo dco_decode_device_info(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
final arr = raw as List<dynamic>;
                if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
                return DeviceInfo(name: dco_decode_String(arr[0]),
protocol: dco_decode_protocol_type(arr[1]),
addresses: dco_decode_list_ip_addr(arr[2]),
port: dco_decode_u_16(arr[3]),); }

@protected ErrorMessage dco_decode_error_message(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
switch (raw[0]) {
                case 0: return ErrorMessage_Error(dco_decode_String(raw[1]),);
                default: throw Exception("unreachable");
            } }

@protected double dco_decode_f_64(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as double; }

@protected int dco_decode_i_32(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as int; }

@protected IpAddr dco_decode_ip_addr(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
switch (raw[0]) {
                case 0: return IpAddr_V4(o1: dco_decode_u_8(raw[1]),o2: dco_decode_u_8(raw[2]),o3: dco_decode_u_8(raw[3]),o4: dco_decode_u_8(raw[4]),);
case 1: return IpAddr_V6(o1: dco_decode_u_8(raw[1]),o2: dco_decode_u_8(raw[2]),o3: dco_decode_u_8(raw[3]),o4: dco_decode_u_8(raw[4]),o5: dco_decode_u_8(raw[5]),o6: dco_decode_u_8(raw[6]),o7: dco_decode_u_8(raw[7]),o8: dco_decode_u_8(raw[8]),o9: dco_decode_u_8(raw[9]),o10: dco_decode_u_8(raw[10]),o11: dco_decode_u_8(raw[11]),o12: dco_decode_u_8(raw[12]),o13: dco_decode_u_8(raw[13]),o14: dco_decode_u_8(raw[14]),o15: dco_decode_u_8(raw[15]),o16: dco_decode_u_8(raw[16]),scopeId: dco_decode_u_32(raw[17]),);
                default: throw Exception("unreachable");
            } }

@protected List<IpAddr> dco_decode_list_ip_addr(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return (raw as List<dynamic>).map(dco_decode_ip_addr).toList(); }

@protected Uint8List dco_decode_list_prim_u_8_strict(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as Uint8List; }

@protected DeviceInfo? dco_decode_opt_box_autoadd_device_info(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw == null ? null : dco_decode_box_autoadd_device_info(raw); }

@protected ProtocolType dco_decode_protocol_type(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return ProtocolType.values[raw as int]; }

@protected int dco_decode_u_16(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as int; }

@protected int dco_decode_u_32(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as int; }

@protected int dco_decode_u_8(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as int; }

@protected void dco_decode_unit(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return; }

@protected BigInt dco_decode_usize(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return dcoDecodeU64(raw); }

@protected CastContext sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastContext(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return CastContextImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected CastingDevice sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastingDevice(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return CastingDeviceImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected DeviceConnectionState sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_DeviceConnectionState(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return DeviceConnectionStateImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected GenericKeyEvent sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_GenericKeyEvent(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return GenericKeyEventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected GenericMediaEvent sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_GenericMediaEvent(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return GenericMediaEventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected PlaybackState sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PlaybackState(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return PlaybackStateImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected Source sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Source(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return SourceImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected CastContext sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastContext(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return CastContextImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected CastContext sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastContext(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return CastContextImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected CastingDevice sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastingDevice(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return CastingDeviceImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected DeviceConnectionState sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_DeviceConnectionState(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return DeviceConnectionStateImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected GenericKeyEvent sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_GenericKeyEvent(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return GenericKeyEventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected GenericMediaEvent sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_GenericMediaEvent(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return GenericMediaEventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected PlaybackState sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PlaybackState(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return PlaybackStateImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected Source sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Source(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return SourceImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected String sse_decode_String(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_list_prim_u_8_strict(deserializer);
        return utf8.decoder.convert(inner); }

@protected DeviceInfo sse_decode_box_autoadd_device_info(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return (sse_decode_device_info(deserializer)); }

@protected DeviceInfo sse_decode_device_info(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var var_name = sse_decode_String(deserializer);
var var_protocol = sse_decode_protocol_type(deserializer);
var var_addresses = sse_decode_list_ip_addr(deserializer);
var var_port = sse_decode_u_16(deserializer);
return DeviceInfo(name: var_name, protocol: var_protocol, addresses: var_addresses, port: var_port); }

@protected ErrorMessage sse_decode_error_message(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs

            var tag_ = sse_decode_i_32(deserializer);
            switch (tag_) { case 0: var var_field0 = sse_decode_String(deserializer);
return ErrorMessage_Error(var_field0); default: throw UnimplementedError(''); }
             }

@protected double sse_decode_f_64(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getFloat64(); }

@protected int sse_decode_i_32(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getInt32(); }

@protected IpAddr sse_decode_ip_addr(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs

            var tag_ = sse_decode_i_32(deserializer);
            switch (tag_) { case 0: var var_o1 = sse_decode_u_8(deserializer);
var var_o2 = sse_decode_u_8(deserializer);
var var_o3 = sse_decode_u_8(deserializer);
var var_o4 = sse_decode_u_8(deserializer);
return IpAddr_V4(o1: var_o1, o2: var_o2, o3: var_o3, o4: var_o4);case 1: var var_o1 = sse_decode_u_8(deserializer);
var var_o2 = sse_decode_u_8(deserializer);
var var_o3 = sse_decode_u_8(deserializer);
var var_o4 = sse_decode_u_8(deserializer);
var var_o5 = sse_decode_u_8(deserializer);
var var_o6 = sse_decode_u_8(deserializer);
var var_o7 = sse_decode_u_8(deserializer);
var var_o8 = sse_decode_u_8(deserializer);
var var_o9 = sse_decode_u_8(deserializer);
var var_o10 = sse_decode_u_8(deserializer);
var var_o11 = sse_decode_u_8(deserializer);
var var_o12 = sse_decode_u_8(deserializer);
var var_o13 = sse_decode_u_8(deserializer);
var var_o14 = sse_decode_u_8(deserializer);
var var_o15 = sse_decode_u_8(deserializer);
var var_o16 = sse_decode_u_8(deserializer);
var var_scopeId = sse_decode_u_32(deserializer);
return IpAddr_V6(o1: var_o1, o2: var_o2, o3: var_o3, o4: var_o4, o5: var_o5, o6: var_o6, o7: var_o7, o8: var_o8, o9: var_o9, o10: var_o10, o11: var_o11, o12: var_o12, o13: var_o13, o14: var_o14, o15: var_o15, o16: var_o16, scopeId: var_scopeId); default: throw UnimplementedError(''); }
             }

@protected List<IpAddr> sse_decode_list_ip_addr(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs

        var len_ = sse_decode_i_32(deserializer);
        var ans_ = <IpAddr>[];
        for (var idx_ = 0; idx_ < len_; ++idx_) { ans_.add(sse_decode_ip_addr(deserializer)); }
        return ans_;
         }

@protected Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var len_ = sse_decode_i_32(deserializer);
                return deserializer.buffer.getUint8List(len_); }

@protected DeviceInfo? sse_decode_opt_box_autoadd_device_info(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs

            if (sse_decode_bool(deserializer)) {
                return (sse_decode_box_autoadd_device_info(deserializer));
            } else {
                return null;
            }
             }

@protected ProtocolType sse_decode_protocol_type(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_i_32(deserializer);
        return ProtocolType.values[inner]; }

@protected int sse_decode_u_16(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getUint16(); }

@protected int sse_decode_u_32(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getUint32(); }

@protected int sse_decode_u_8(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getUint8(); }

@protected void sse_decode_unit(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
 }

@protected BigInt sse_decode_usize(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getBigUint64(); }

@protected bool sse_decode_bool(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getUint8() != 0; }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastContext(CastContext self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as CastContextImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastingDevice(CastingDevice self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as CastingDeviceImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_DeviceConnectionState(DeviceConnectionState self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as DeviceConnectionStateImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_GenericKeyEvent(GenericKeyEvent self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as GenericKeyEventImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_GenericMediaEvent(GenericMediaEvent self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as GenericMediaEventImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PlaybackState(PlaybackState self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as PlaybackStateImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Source(Source self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as SourceImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastContext(CastContext self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as CastContextImpl).frbInternalSseEncode(move: false), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastContext(CastContext self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as CastContextImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCastingDevice(CastingDevice self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as CastingDeviceImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_DeviceConnectionState(DeviceConnectionState self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as DeviceConnectionStateImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_GenericKeyEvent(GenericKeyEvent self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as GenericKeyEventImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_GenericMediaEvent(GenericMediaEvent self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as GenericMediaEventImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_PlaybackState(PlaybackState self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as PlaybackStateImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Source(Source self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as SourceImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_String(String self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer); }

@protected void sse_encode_box_autoadd_device_info(DeviceInfo self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_device_info(self, serializer); }

@protected void sse_encode_device_info(DeviceInfo self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_String(self.name, serializer);
sse_encode_protocol_type(self.protocol, serializer);
sse_encode_list_ip_addr(self.addresses, serializer);
sse_encode_u_16(self.port, serializer);
 }

@protected void sse_encode_error_message(ErrorMessage self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
switch (self) { case ErrorMessage_Error(field0: final field0): sse_encode_i_32(0, serializer); sse_encode_String(field0, serializer);
  } }

@protected void sse_encode_f_64(double self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putFloat64(self); }

@protected void sse_encode_i_32(int self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putInt32(self); }

@protected void sse_encode_ip_addr(IpAddr self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
switch (self) { case IpAddr_V4(o1: final o1,o2: final o2,o3: final o3,o4: final o4): sse_encode_i_32(0, serializer); sse_encode_u_8(o1, serializer);
sse_encode_u_8(o2, serializer);
sse_encode_u_8(o3, serializer);
sse_encode_u_8(o4, serializer);
case IpAddr_V6(o1: final o1,o2: final o2,o3: final o3,o4: final o4,o5: final o5,o6: final o6,o7: final o7,o8: final o8,o9: final o9,o10: final o10,o11: final o11,o12: final o12,o13: final o13,o14: final o14,o15: final o15,o16: final o16,scopeId: final scopeId): sse_encode_i_32(1, serializer); sse_encode_u_8(o1, serializer);
sse_encode_u_8(o2, serializer);
sse_encode_u_8(o3, serializer);
sse_encode_u_8(o4, serializer);
sse_encode_u_8(o5, serializer);
sse_encode_u_8(o6, serializer);
sse_encode_u_8(o7, serializer);
sse_encode_u_8(o8, serializer);
sse_encode_u_8(o9, serializer);
sse_encode_u_8(o10, serializer);
sse_encode_u_8(o11, serializer);
sse_encode_u_8(o12, serializer);
sse_encode_u_8(o13, serializer);
sse_encode_u_8(o14, serializer);
sse_encode_u_8(o15, serializer);
sse_encode_u_8(o16, serializer);
sse_encode_u_32(scopeId, serializer);
  } }

@protected void sse_encode_list_ip_addr(List<IpAddr> self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.length, serializer);
        for (final item in self) { sse_encode_ip_addr(item, serializer); } }

@protected void sse_encode_list_prim_u_8_strict(Uint8List self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.length, serializer);
                    serializer.buffer.putUint8List(self); }

@protected void sse_encode_opt_box_autoadd_device_info(DeviceInfo? self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs

                sse_encode_bool(self != null, serializer);
                if (self != null) {
                    sse_encode_box_autoadd_device_info(self, serializer);
                }
                 }

@protected void sse_encode_protocol_type(ProtocolType self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.index, serializer); }

@protected void sse_encode_u_16(int self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putUint16(self); }

@protected void sse_encode_u_32(int self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putUint32(self); }

@protected void sse_encode_u_8(int self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putUint8(self); }

@protected void sse_encode_unit(void self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
 }

@protected void sse_encode_usize(BigInt self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putBigUint64(self); }

@protected void sse_encode_bool(bool self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putUint8(self ? 1 : 0); }
                }
                
