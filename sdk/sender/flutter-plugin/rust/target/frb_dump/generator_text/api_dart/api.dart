// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'api.freezed.dart';

            // These functions are ignored because they are not marked as `pub`: `casting_protocol`, `change_speed`, `change_volume`, `connect`, `disconnect`, `get_addresses`, `get_device_info`, `get_port`, `is_ready`, `load`, `name`, `pause_playback`, `playlist_item_next`, `playlist_item_previous`, `resume_playback`, `seek`, `set_addresses`, `set_name`, `set_playlist_item_index`, `set_port`, `stop_playback`, `subscribe_event`, `supports_feature`, `unsubscribe_event`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `ApplicationInfo`, `CastingDeviceError`, `DeviceConnectionState`, `DeviceEventHandlerWrapper`, `DeviceFeature`, `GenericEventSubscriptionGroup`, `GenericKeyEvent`, `GenericMediaEvent`, `LoadRequest`, `Metadata`, `PlaybackState`, `PlaylistItem`, `Source`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`
// These functions are ignored (category: IgnoreBecauseNotAllowedOwner): `default`
// These functions are ignored (category: IgnoreBecauseOwnerTyShouldIgnore): `connection_state_changed`, `duration_changed`, `key_event`, `media_event`, `playback_error`, `playback_state_changed`, `source_changed`, `speed_changed`, `time_changed`, `volume_changed`


            Future<DeviceInfo?>  deviceInfoFromUrl({required String url }) => RustLib.instance.api.crateApiDeviceInfoFromUrl(url: url);

            
                // Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CastContext>>
                abstract class CastContext implements RustOpaqueInterface {
                     CastingDevice  createDeviceFromInfo({required DeviceInfo info });


factory CastContext()=>RustLib.instance.api.crateApiCastContextNew();



                    
                }
                


                // Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CastingDevice>>
                abstract class CastingDevice implements RustOpaqueInterface {
                    

                    
                }
                


                // Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<_DeviceConnectionState>>
                abstract class DeviceConnectionState implements RustOpaqueInterface {
                    

                    
                }
                


                // Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<_GenericKeyEvent>>
                abstract class GenericKeyEvent implements RustOpaqueInterface {
                    

                    
                }
                


                // Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<_GenericMediaEvent>>
                abstract class GenericMediaEvent implements RustOpaqueInterface {
                    

                    
                }
                


                // Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<_Source>>
                abstract class Source implements RustOpaqueInterface {
                    

                    
                }
                


                abstract class DeviceEventHandler {
                     Future<void>  connectionStateChanged({required DeviceConnectionState state });


 Future<void>  durationChanged({required double duration });


 Future<void>  keyEvent({required GenericKeyEvent event });


 Future<void>  mediaEvent({required GenericMediaEvent event });


 Future<void>  playbackError({required String message });


 Future<void>  playbackStateChanged({required PlaybackState state });


 Future<void>  sourceChanged({required Source source });


 Future<void>  speedChanged({required double speed });


 Future<void>  timeChanged({required double time });


 Future<void>  volumeChanged({required double volume });


                }
                

class DeviceInfo  {
                final String name;
final ProtocolType protocol;
final List<IpAddr> addresses;
final int port;

                const DeviceInfo({required this.name ,required this.protocol ,required this.addresses ,required this.port ,});

                
                

                
        @override
        int get hashCode => name.hashCode^protocol.hashCode^addresses.hashCode^port.hashCode;
        

                
        @override
        bool operator ==(Object other) =>
            identical(this, other) ||
            other is DeviceInfo &&
                runtimeType == other.runtimeType
                && name == other.name&& protocol == other.protocol&& addresses == other.addresses&& port == other.port;
        
            }

@freezed
                sealed class ErrorMessage with _$ErrorMessage implements FrbException {
                    const ErrorMessage._();

                     const factory ErrorMessage.error(  String field0,) = ErrorMessage_Error;

                    

                    
                }

@freezed
                sealed class IpAddr with _$IpAddr  {
                    const IpAddr._();

                     const factory IpAddr.v4({   required int o1 ,  required int o2 ,  required int o3 ,  required int o4 , }) = IpAddr_V4;
 const factory IpAddr.v6({   required int o1 ,  required int o2 ,  required int o3 ,  required int o4 ,  required int o5 ,  required int o6 ,  required int o7 ,  required int o8 ,  required int o9 ,  required int o10 ,  required int o11 ,  required int o12 ,  required int o13 ,  required int o14 ,  required int o15 ,  required int o16 ,  required int scopeId , }) = IpAddr_V6;

                    

                    
                }

enum ProtocolType {
                    chromecast,
fCast,
                    ;
                    
                }
            